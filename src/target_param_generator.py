import os
import random as rd

from season1.labeler import save_file

target_range = {
    "enemy_count": (10, 26),
    "treasure_count": (1, 4),
    "room_count": (5, 13),
    "map_size": (16, 26),
    "exploration": (0.4, 0.7),
    "winding_path": (0.3, 0.9),
}


def output_target_param(
    path: str, file_count: int = 10, param_count: int = 100
) -> None:
    """
    Generates and saves parameter lists to files.

    This function generates a specific number of parameter lists and saves them to files at the specified
    path. Each file will contain a parameter list generated by the internal `_generate_target_params_for` function.
    The number of files and the number of parameters per file can be adjusted via function arguments.

    Args:
        map_list (list): A list of mappings or configurations (currently unused in the function).
        path (str): The directory path where the generated files will be saved.
        file_count (int, optional): The number of files to generate and save. Default is 10.
        param_count (int, optional): The number of parameters in each file. Default is 100.

    Returns:
        None: This function does not return anything.

    Raises:
        Any exceptions raised by `save_file` or `_generate_target_params_for` will propagate.

    Example:
        output_target_param([], "/path/to/save/files", 5, 50)
        This will generate 5 files, each containing 50 parameters, and save them in the specified path.
    """
    if not os.path.exists(path):
        os.makedirs(path)

    cur_dir = os.path.dirname(os.path.abspath(__file__))
    for i in range(file_count):
        _path = os.path.join(cur_dir, path, f"batch{i}.json")
        save_file({"param_list": _generate_target_params_for(param_count)}, _path)


def _generate_target_params_for(repeatition: int = 100) -> list:
    result_list = []
    for i in range(repeatition):
        result_list.append(_generate_target_param())
    return result_list


def _generate_target_param() -> dict:
    return {
        "enemy_count": rd.randint(
            target_range["enemy_count"][0], target_range["enemy_count"][1]
        ),
        "treasure_count": rd.randint(
            target_range["treasure_count"][0], target_range["treasure_count"][1]
        ),
        "room_count": rd.randint(
            target_range["room_count"][0], target_range["room_count"][1]
        ),
        "map_size": rd.randint(
            target_range["map_size"][0], target_range["map_size"][1]
        ),
        "exploration": rd.uniform(
            target_range["exploration"][0], target_range["exploration"][1]
        ),
        "winding_path": rd.uniform(
            target_range["winding_path"][0], target_range["winding_path"][1]
        ),
    }


if __name__ == "__main__":
    output_target_param("../data/test/")
    pass
